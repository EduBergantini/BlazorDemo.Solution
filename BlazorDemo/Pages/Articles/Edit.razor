@page "/articles/edit/{articleID}"
@inject NavigationManager NavigationManager
@using Microsoft.Extensions.DependencyInjection
@inherits OwningComponentBase


<h3>Edit</h3>

<EditForm Model="article" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <input @bind-value="article.Id" type="hidden" />

    <div class="form-group">
        <label for="Title">Title</label>
        <InputText id="Title" @bind-Value="article.Title" class="form-control" placeholder="Enter the article title..." aria-describedby="titleHelp" />
        <small id="titleHelp" class="form-text text-muted">Describe the title of your e-mail.</small>
    </div>

    <div class="form-group">
        <label for="Description">Description</label>
        <InputText id="Title" @bind-Value="article.Description" class="form-control" placeholder="Enter the article description..." aria-describedby="descHelp" />
        <small id="descHelp" class="form-text text-muted">Describe the intent of your article in a few words.</small>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

<ul>
    @foreach (var item in article.Paragraphs)
    {
        <li>
            <p>@item.Content</p>
            <img src="@item.ImageUrl" alt="Image" />
        </li>
    }
</ul>

@code {
    [Parameter]
    public string ArticleID { get; set; }

    private Article article;

    protected override async Task OnInitializedAsync()
    {
        int articleId;
        if (int.TryParse(ArticleID, out articleId))
        {
            var articleRepository = ScopedServices.GetRequiredService<ArticleRepository>();
            var articles = await articleRepository.GetArticlesAsync(x => x.Id == Convert.ToInt32(ArticleID));
            if (articles.Length > 0)
            {
                this.article = articles[0];
            }
        }
        else
        {
            NavigationManager.NavigateTo("articles/index", false);
        }

    }

    public async Task HandleValidSubmit()
    {
        var articleRepository = ScopedServices.GetRequiredService<ArticleRepository>();
        await articleRepository.UpdateArticle(article);
        NavigationManager.NavigateTo("articles/index", false);
    }

}

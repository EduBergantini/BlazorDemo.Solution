@page "/articles/edit/{articleID}"

@using Microsoft.Extensions.DependencyInjection
@using BlazorDemo.Pages.Paragraphs

@inject NavigationManager NavigationManager
@inject IModalService Modal

@inherits OwningComponentBase


<h1>Editar Artigo</h1>

<EditForm Model="article" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <input @bind-value="article.Id" type="hidden" />

    <div class="form-group">
        <label for="Title">Title</label>
        <InputText id="Title" @bind-Value="article.Title" class="form-control" placeholder="Digite o título do artigo" aria-describedby="titleHelp" />
        <small id="titleHelp" class="form-text text-muted">Escreva o texto do seu artigo.</small>
    </div>

    <div class="form-group">
        <label for="Description">Description</label>
        <InputText id="Title" @bind-Value="article.Description" class="form-control" placeholder="Digite a descrição do artigo" aria-describedby="descHelp" />
        <small id="descHelp" class="form-text text-muted">Descreva o seu artigo em poucas palavras.</small>
    </div>

    <button type="submit" class="btn btn-primary">Atualizar</button>
</EditForm>

<NavLink class="nav-link" href="@($"articles/{ArticleID}/paragraphs")"> <span class="oi oi-list-rich"></span> Novo Paragrafo </NavLink>

<ul>
    @foreach (var item in article.Paragraphs)
    {
    <li>
        <p>@item.Content</p>
        @if (item.ImageUrl != null)
        {
            <img src="@item.ImageUrl" alt="Image" style="width:300px; height:100px;" />
        }


        <a class="btn btn-primary" href="@($"articles/{item.ArticleId}/paragraphs/{item.Id}")">
            <span class="oi oi-pencil"></span> Editar
        </a>

        <button @onclick="@(() => RemoveParagraph(item.Id))" class="btn btn-danger">
            <span class="oi oi-ban"></span> Excluir
        </button>
    </li>
    }
</ul>

@code {
    [CascadingParameter]
    public IModalService ModalService { get; set; }

    [Parameter]
    public string ArticleID { get; set; }

    private Article article;

    protected override async Task OnInitializedAsync()
    {
        int articleId;
        if (int.TryParse(ArticleID, out articleId))
        {
            var articleRepository = ScopedServices.GetRequiredService<ArticleRepository>();
            var articles = await articleRepository.GetArticlesAsync(x => x.Id == Convert.ToInt32(ArticleID));
            if (articles.Length > 0)
            {
                this.article = articles[0];
            }
        }
        else
        {
            NavigationManager.NavigateTo("articles/index", false);
        }

    }

    public async Task HandleValidSubmit()
    {
        var articleRepository = ScopedServices.GetRequiredService<ArticleRepository>();
        await articleRepository.UpdateArticle(article);
        NavigationManager.NavigateTo("articles/index", false);
    }

    public async Task RemoveParagraph(int paragraphId)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(YesNoOption.Description), "Essa ação não pode ser desfeita e todo o conteúdo será perdido.");

        var modalReference = ModalService.Show<YesNoOption>("Deseja remover esse paragrafo?", parameters);
        var modalResult = await modalReference.Result;

        if (!modalResult.Cancelled && (bool)modalResult.Data)
        {
            var paragraphRepository = ScopedServices.GetRequiredService<ParagraphRepository>();
            var paragraph = await paragraphRepository.GetParagraphsAsync(x => x.Id == paragraphId && x.ArticleId == Convert.ToInt32(ArticleID));
            if (paragraph.Length > 0)
            {
                await paragraphRepository.RemoveParagraph(paragraph[0]);
            }
            else
            {
                //TODO: Enviar mensagem de erro
            }
        }



    }

}
